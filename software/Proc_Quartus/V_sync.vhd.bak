Library IEEE;
use IEEE.std_logic_1164.all;

entity V_sync is
	Port(
		clk25: in std_logic;
		reset : in std_logic;
		cnt_y_enable : out std_logic;
		HS : out std_logic;
		inDispH : out std_logic;
end V_sync;

/* 
		Assuming we use VGA for 60Hz, 640x480 it comes:
			
			VERTICAL TIMING
			
				- a : 2 lines		=> Sync (HSync low)									=> 1585 clock cycles (or 63.4us)
				- b : 33 lines		=> back porch (before display)					=> 26152.5 clock cycles (or 1046,1us)
				- c : 480 lines	=> display time										=> 380400 clock cycles (or 15216us)
				- d : 10 lines		=> front porch (after display, before sync)	=> 7925 clock cycles (or 317us)
				
			=> 416062.5 clock cycles (or 16.6424ms) per frame
			
			Also meaning:
				
				- a : 2 lines => 1 lines
				- b : 33 lines => 34 lines
				- c : 480 lines => 514 lines
				- d : 10 lines => 524 lines
			
			Hence: a counter from 0 to 799 that restart at 800 and set inDispH between the 143rd and 782nd px.
			Mostly, it gives us:
			counter between 0 and 95 => HS = 0, inDispH = 0,
			counter between 96 and 143 => HS = 1, inDispH = 0,
			counter between 144 and 783 => HS = 1, inDispH = 1,
			counter between 784 and 799 => HS = 0, inDispH = 0.
*/

architecture Behavioral of V_sync is
	signal counter = natural range 0 to 800;
	
	process(clk25)
	begin
		if reset == '1' then
			counter <= 0 ;
		elsif rising_edge(clk25) then
			if counter == 800 then
				counter <= 0 ;
			else	
				counter <= counter + 1 ;
		end if ;
	end process ;

	HS <= '1' when (counter > 95 and counter < 144) else '0' ;
	inDispH <= '1' when (counter > 143 and counter < 784) else '0' ;
	cnt_y_enable <= '1' when counter == 799 else '0' ;
	

end Behavioral;