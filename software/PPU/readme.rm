The PPU readme is only present in purpose to compilate all knowledge about the PPU memory mapping and application 

the PPU can be cut 4 large parts 



PART in PPU 

    the first part of PPU is the PATTER TABLE 

        this containt 2 sqare table of 16 tiles, every tiles is a square of 8 pixel
        each TABLE containt 64KB of memory


     The Second is Nametables 

        containt the layout background 
        The image is 32x30 tiles, every tiles is a 8px x 8px 
        layed the data of each tiles form the cartridge, it's very long and many game make some tric knowledge
        after 
        1 Byte (OCTE!!!) by TILES 
        end have an Attribute table, an serie of byte with the association of the palette for 4 tiles 

    The Third The Palette 

        the PPU can distinct 64 colors (every colors is code on 1 BYTE)
        but can only stock 4 color for the Background and 4 color for the Foreground
        however the color, the first color is transparent
        it's use to make the transparent thing on a spirt
        In memory the color is write on 2 bits -> every tiles requert 128 bits for code all the color 

        This fourth color are link with a number between 0 and 3, so this number can be code on 2 bits 
        For stock the color of the tiles, for each line, the low and hight bits are separat and the both are stock on an Byte
        (easy use by PPU)


    Fourth Object Attribute Memory (OAM !!!)

        Controle the background and the sprite of the game 
        For the color, it's use the same principe as the palette utilisation 
        for every sprite: the first byte give the hight of the sprite 
        the seconde byte give the pablette where the sprite are stocked 
        the third give the attribute of the sprite  *
        the fourth give the x position
        
        * For this byte, form the low bit :
        0 and 1 select the palette (group of 4 color)
        2,3,4 are not use 
        5 controle the fact to be above or below the background (0 fround, 1 back)
        6  accivate if the sprite is slip horizontaly
        6  accivate if the sprite is slip vderticaly



About Memory
    Basicly the PPU is link with 32 Kbits of memory, in fact it's more complexe 

    In a Hardware POV the PPU have only few which come from the PPU.
        the 0x0000-0x1FFF are the CHR-RAM/CHR-ROM (depending of the cardbridge)
        the 0x2000-0x2FFF are the VRAM link to the PPU 
        the 0x3000-0x3EFF Copy of the VRAM data presented as negligible by Nesdev 
        the 0x3F00-3FFF not configurable, always mapped to the internal palete controle 

        But another Register existe, in the PPU eight register and a memory of 256 word of 8 bits are present
        this Memory is dedicate to the OAM (the moving sprite)
        the eight register add a way for the CPU to interact with the PPU 




REGISTER 

    General Address: 
            0x2000 PPUCTRL 
            0x2001 PPUMASK
            0x2002 PPUSTATUE
            0x2003 OAMADDR 
            0x2004 OAMDATA
            0x2005 PPUSCROLL
            0x2006 PPUADDR 
            0x2007 PPUDATA
            0x4014 OAMDMA

   after that :0 is the MSB

            FOR PPUCTRL (0x2000)

                0 : enable the NMI      0=OFF 1=ON               --Stop here 



                1 : PPU master/slave    0=Slave 1=Master


                2 : sprite hight 

                3 : background tile select

                4 : sprite tile select 

                5 : increment mode

                6-7 : nametable select 



            FOR PPUMASK (0x2001)  

                0-2 : color emphasis      0=OFF 1=ON 

                3 : sprite hight 

                4 : background enable

                5 : sprite left column enable 

                6 : background left column enable

                7 : greyscale



            FOR PPUSTATUE (0x2002)  

                0 : vblank      0=OFF 1=ON 

                1 : sprite 0 hit

                2 : sprite overflow



            FOR OAMADDR (0x2003)  

                0-7 : OAM read write Address



            FOR OAMDATA (0x2004)  

                0-7 : OAM read write data



            FOR PPUSCROLL (0x2005)  

                0-7 : fine scroll position 



            FOR PPUSCROLL (0x2006)  

                0-7 : OAM read write data



            FOR PPUSCROLL (0x2007)  

                0-7 : OAM read write data

the application